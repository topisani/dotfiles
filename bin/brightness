#!/bin/bash

dunst_id=321477

show_help() {
    echo "Usage: $0 [up|down|query] --notify|-n"
}

query() {
    res=$(brightnessctl --class backlight info | grep -oP "\(\K\d+%\)")
    echo ${res//%)/}
}

icon() {
    if (( $1 == 0 )); then
        icon=off
    elif (( $1 < 34 )); then
        icon=low
    elif (( $1 < 67 )); then
        icon=medium
    else
        icon=high
    fi
    echo display-brightness-$icon-symbolic
    #echo /usr/share/icons/Yaru/scalable/status/display-brightness-symbolic.svg
}

send_notification() {
    val=$(query)
    dunstify -u 0 -i $(icon $val) "Brightness: $val%" -r $dunst_id -h int:value:"$val"
}

brightness_set() {
    percent=$1
    brightnessctl --class backlight set $percent%

    # Set external monitor brightness through ddcutil

    if [[ ! -e /tmp/monitor-i2c-buses ]]; then
            # detects and stores i2c bus numbers for all monitors in /tmp
            ddcutil detect -t | grep '^Display .*' -A2 | grep -o "i2c.*" | cut -f2- -d- > /tmp/monitor-i2c-buses
    fi

    # VCP code for monitor brightness, usually 10. 
    VCP=10

    while read BUS; do
            # --bus to send over I2C, which has the least overhead.
            # --noverify to skip waiting for acknowledgement packet.
            ddcutil --bus $BUS setvcp $VCP $percent --noverify &
    done < /tmp/monitor-i2c-buses
    wait
}

notify=0

while (( $# )); do
    case $1 in
        -h|-\?|--help)
            show_help
            ;;
        query)
            query
            ;;
        up)
            brightnessctl --class backlight set +5%
            ;;
        down)
            brightnessctl --class backlight set 5%-
            ;;
        set)
            shift
            brightness_set $1
            ;;
        --notify|-n)
            notify=1
            ;;
        *)
            break;
            ;;
    esac
    shift
done

if (( $notify )); then
    send_notification
fi
