#!/bin/bash
#
# Use rofi/zenity to change system runstate thanks to systemd.
#
# Note: this currently relies on associative array support in the shell.
#
# Inspired from i3pystatus wiki:
# https://github.com/enkore/i3pystatus/wiki/Shutdown-Menu
#
# Copyright 2015 Benjamin Chr√©tien <chretien at lirmm dot fr>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#######################################################################
#                            BEGIN CONFIG                             #
#######################################################################

# Use a custom lock script
LOCKSCRIPT="sh $HOME/.bin/scripts/lock.sh"
EXITSCRIPT="i3-msg exit"

# Options not related to colors
ROFI_TEXT="Power:"
ROFI_OPTIONS=""

#######################################################################
#                             END CONFIG                              #
#######################################################################

# Whether to ask for user's confirmation
enable_confirmation=false

usage="$(basename "$0") [-h] [-c] [-p name] -- display a menu for shutdown, reboot, lock etc.

where:
    -h  show this help text
    -c  ask for user confirmation

This script depends on:
  - systemd,
  - rofi"

# Parse CLI arguments
while getopts "hcp:" option; do
  case "${option}" in
    h) echo "${usage}"
       exit 0
       ;;
    c) enable_confirmation=true
       ;;
    *) exit 1
       ;;
  esac
done

# Check whether a command exists
function command_exists() {
  command -v "$1" &> /dev/null 2>&1
}

# systemctl required
if ! command_exists systemctl ; then
  exit 1
fi

# menu defined as an associative array
typeset -A menu

# Menu with keys/commands
menu=(
  [Shutdown]="systemctl poweroff"
  [Reboot]="systemctl reboot"
  [Hibernate]="systemctl hibernate"
  [Suspend]="systemctl suspend"
  [Halt]="systemctl halt"
  [Lock]="${LOCKSCRIPT}"
  [Logout]="${EXITSCRIPT}"
  [Cancel]=""
)
menu_nrows=${#menu[@]}

# Menu entries that may trigger a confirmation message
menu_confirm="Shutdown Reboot Hibernate Suspend Halt Logout"

launcher_exe=""
launcher_options=""
rofi_colors=""

function prepare_launcher() {
    rofi_colors="-bc ${BORDER_COLOR} -bg ${BG_COLOR} -fg ${FG_COLOR} \
      -hlfg ${HLFG_COLOR} -hlbg ${HLBG_COLOR}"
    launcher_exe="rofi"
    launcher_options="-dmenu -i -lines ${menu_nrows} -p ${ROFI_TEXT} \
      ${rofi_colors} ${ROFI_OPTIONS}"
}

if command_exists "rofi" ; then
  prepare_launcher "rofi"
fi

# No launcher available
if [[ -z "${launcher_exe}" ]]; then
  exit 1
fi

launcher="${launcher_exe} ${launcher_options}"
selection="$(printf '%s\n' "${!menu[@]}" | sort | ${launcher})"

function ask_confirmation() {
  confirmed=$(echo -e "Yes\nNo" | rofi -dmenu -i -lines 2 -p "${selection}?" \
      ${rofi_colors} ${ROFI_OPTIONS})
  [ "${confirmed}" == "Yes" ] && confirmed=0

  if [ "${confirmed}" == 0 ]; then
    exec ${menu[${selection}]}
  fi
}

if [[ $? -eq 0 && ! -z ${selection} ]]; then
  if [[ "${enable_confirmation}" = true && \
        ${menu_confirm} =~ (^|[[:space:]])"${selection}"($|[[:space:]]) ]]; then
    ask_confirmation
  else
    exec ${menu[${selection}]}
  fi
fi
