#!/bin/bash

# modify the following two variables to match your requirements
# path to the folder where you store your colorschemes
COLORSCHEME_PATH=$HOME/.config/colorschemes
# path to your xrdb config file
XRDB_CONF_PATH=$HOME/.Xresources

getXrdbColor() {
    echo xrdb -query | LANG=C grep -F "$@:" | cut -d '#' -f2
}

updateXrdb() {
    xrdb -merge $XRDB_CONF_PATH
    xrdb -merge $COLORSCHEME
}

build_query() {
    local key=$1
    local value=$2
    case key in
        \*.foreground)
            printf "%b" 
    query="\033]10;#$(getXrdbColor foreground)\007"
    query+="\033]11;#$(getXrdbColor background)\007"
    query+="\033]12;#$(getXrdbColor cursorColor)\007"
    # urxvt borders
    query+="\033]708;#$(getXrdbColor background)\007"
    esac
}

updateTerminal() {
    COLORSCHEME="$(getColorschemePath $COLORSCHEME_NAME)"
    while read line; do
        local kv=( ${line//:/ } )
        local key=${kv[0]}
        local value=${kv[1]}
        case $key in
            \*.color*)
                local n=${key//\*.color/}
                echo -en "\033]4;$n;$value\007"
            ;;
            \*.foreground)
                echo -en "\033]10;$value\007"
            ;;
            \*.background)
                echo -en "\033]11;$value\007"
                # URXVT border color
                echo -en "\033]708;$value\007"
            ;;
            \*.cursorColor)
                echo -en "\033]12;$value\007"
            ;;
        esac
    done <<< $(cat $COLORSCHEME)
}

updateTerminals() {
    # send sequence to all terminals
    local query terminal
    query=$(updateTerminal);
    for terminal in /dev/pts/[0-9]*; do
        printf "%b" "${query}" > "${terminal}" &
    done
}

buildTermiteConfig() {
    echo "###########################################"
    echo "# DO NOT EDIT                             #"
    echo "# Generated by colorscheme-switch         #"
    echo "# Set options in config.in                #"
    echo "###########################################"  
    echo ""
    cat ~/.config/termite/config.in
    echo ""
    echo "[colors]"
    while read line; do
        local kv=( ${line//:/ } )
        local key=${kv[0]}
        local value=${kv[1]}
        case $key in
            \*.color*)
                local n=${key//\*.color/}
                echo "color$n = $value"
            ;;
            \*.foreground)
                echo "foreground = $value"
            ;;
            \*.background)
                echo "background = $value"
            ;;
        esac
    done <<< $(xrdb -query)
}

updateTermite() {
    buildTermiteConfig > ~/.config/termite/config
    killall termite -USR1
}

updateKak() {
    for session in $(kak -l); do
        echo "colorscheme $COLORSCHEME_NAME" | kak -p $session
    done
}

getColorschemePath() {
    find "${COLORSCHEME_PATH}/$1".*resources -type f
}

showColorschemes() {
    find "${COLORSCHEME_PATH}/" -type f | sed 's/\..resources//g; s/.*\///g; /^current$/d'
}

showHelp() {
    cat <<EOF
Make sure that the variables located at the top of the script colorscheme-switch match your setup
Usage:
      colorscheme-switch
      colorscheme-switch (-h | --help)
      colorscheme-switch (-l | --list)
      colorscheme-switch (-s colorscheme | --switch colorscheme)

Calling with no arguments will rotate between colorschemes

Arguments:
    --help = show this help text
    --list = list all available colorschemes
    --switch = set a available colorscheme in xrdb and all terminals
    --reload = reload the current colorscheme
    --terminal = reload the current colorscheme just for the current terminal
    --current = get the name of the current colorscheme
EOF
}

switch() {
    COLORSCHEME_NAME=$1
    if getColorschemePath $COLORSCHEME_NAME &> /dev/null; then
        COLORSCHEME="$(getColorschemePath $COLORSCHEME_NAME)"
        echo "$COLORSCHEME_NAME" > $COLORSCHEME_PATH/current
        updateXrdb
        updateKak
        # updateTerminals
        updateTermite
    else
        exit 1
    fi
}

swap() {
  local cur=$(cat $COLORSCHEME_PATH/current)
  local next=$cur
  for col in $(showColorschemes); do
    ! [[ $col = $cur ]] && next=$col
  done
  echo $next
  switch $next
}

main() {
    [[ $# = 0 ]] && swap && return 0
    local option argument
    option="${1-}"
    argument="${2-}"
    case "${option}" in
        -r | --reload)
            switch $(cat $COLORSCHEME_PATH/current);
            ;;
        -t | --terminal)
            # updateTerminal > $(tty)
            ;;
        -c | --current)
            cat $COLORSCHEME_PATH/current
            ;;
        -s | --switch)
            switch $argument
            ;;
        -l | --list)
            showColorschemes
            ;;
        -h | --help)
            showHelp
            ;;
        *)
            showHelp
            exit 1
            ;;
    esac
}

COLORSCHEME=''
main "$@"
