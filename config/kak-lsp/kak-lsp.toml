snippet_support = true
verbosity = 2

[server]
# exit session if no requests were received during given period in seconds
# works only in unix sockets mode (-s/--session)
# set to 0 to disable
timeout = 1800 # seconds = 30 minutes

# [language.rust]
# filetypes = ["rust"]
# roots = ["Cargo.toml"]
# command = "rls"

[language.rust]
filetypes = ["rust"]
roots = ["Cargo.toml"]
command = "sh"
args = ["-c", "rust-analyzer"]
settings_section = "rustanalyzer"

[language.rust.settings.rustanalyzer]
# If you get 'unresolved proc macro' warnings, you have two options
# 1. The safe choice is two disable the warning:
diagnostics.disabled = ["unresolved-proc-macro"]
# 2. Or you can opt-in for proc macro support
procMacro.enable = true
cargo.loadOutDirsFromCheck = true
# See https://github.com/rust-analyzer/rust-analyzer/issues/6448

[language.crystal]
filetypes = ["crystal"]
roots = ["shard.yml"]
command = "scry"

[language.javascript]
filetypes = ["javascript"]
roots = ["package.json"]
command = "flow"
args = ["lsp"]

[language.typescript]
filetypes = ["typescript"]
roots = ["tsconfig.json", "package.json"]
command = "typescript-language-server"
args = ["--stdio"]

[language.json]
filetypes = ["json"]
roots = ["package.json"]
command = "json-languageserver"
args = ["--stdio"]

[language.css]
filetypes = ["css", "scss", "sass", "less"]
roots = ["package.json"]
command = "css-languageserver"
args = ["--stdio"]

[language.html]
filetypes = ["html"]
roots = ["package.json"]
command = "html-languageserver"
args = ["--stdio"]

[language.ocaml]
filetypes = ["ocaml"]
roots = ["Makefile", "opam", "*.opam"]
command = "ocamllsp"

[language.reason]
filetypes = ["reason"]
roots = ["package.json", "Makefile", ".git", ".hg"]
command = "ocamllsp"

[language.python]
filetypes = ["python"]
roots = ["requirements.txt", "setup.py", ".git", ".hg"]
command = "pyls"
offset_encoding = "utf-8"

[language.c_cpp]
filetypes = ["c", "cpp"]
roots = ["compile_commands.json"]
command = "sh"
args = ['-c', 'clangd --log=verbose --cross-file-rename --clang-tidy --query-driver=/home/topisani/**,/usr/**,arm-none-eabi-gcc,arm-none-eabi-*,arm-none-eabi-g++,** 2> clangd.log']

[language.java]
filetypes = ["java"]
roots = ["pom.xml", "build.gradle"]
command = "eclipse.jdt.ls"

# # [language.java.initialization_options.settings.java.trace]
# server = "verbose"

[language.haskell]
filetypes = ["haskell"]
roots = ["Setup.hs", "stack.yaml", "*.cabal"]
command = "haskell-language-server-wrapper"
args = ["--lsp"]
#command = "hie-wrapper"
#args = ["--lsp"]

[language.go]
filetypes = ["go"]
roots = ["Gopkg.toml", "go.mod", ".git", ".hg"]
command = "gopls"
offset_encoding = "utf-8"

[language.bash]
filetypes = ["sh"]
roots = [".git", ".hg"]
command = "bash-language-server"
args = ["start"]

[language.dart]
filetypes = ["dart"]
roots = ["pubspec.yaml", ".git"]
command = "dart"
args = ["/opt/dart-sdk/bin/snapshots/analysis_server.dart.snapshot", "--lsp"]

[language.d]
filetypes = ["d", "di"]
roots = [".git", "dub.sdl", "dub.json"]
command = "dls"

[language.php]
filetypes = ["php"]
roots = [".htaccess", "composer.json"]
command = "intelephense"
args = ["--stdio"]

# [language.php.initialization_options]
# storagePath = "/tmp/intelephense"

[language.nim]
filetypes = ["nim"]
roots = ["*.nimble", ".git"]
command = "nimlsp"

[language.elm]
filetypes = ["elm"]
roots = ["elm.json"]
command = "elm-language-server"
args = ["--stdio"]

# [language.elm.initialization_options]
# runtime = "node"
# elmPath = "elm"
# elmFormatPath = "elm-format"
# elmTestPath = "elm-test"

[language.latex]
filetypes = ["latex"]
roots = ["main.tex"]
command = "texlab"

[language.vue]
filetypes = ["vue"]
roots = ["package.json"]
command = "vls"
settings_section = "vls"

# Semantic tokens support
# See https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_semanticTokens
# for the default list of tokens and modifiers.
# However, many language servers implement their own values.
# Make sure to check the output of `lsp-capabilities` and each server's documentation and source code as well.
# Examples:
# - TypeScript: https://github.com/microsoft/vscode-languageserver-node/blob/2645fb54ea1e764aff71dee0ecc8aceff3aabf56/client/src/common/semanticTokens.ts#L58
# - Rust Analyzer: https://github.com/rust-analyzer/rust-analyzer/blob/f6da603c7fe56c19a275dc7bab1f30fe1ad39707/crates/ide/src/syntax_highlighting.rs#L42
[[semantic_tokens]]
token = "comment"
face = "documentation"
modifiers = ["documentation"]

[[semantic_tokens]]
token = "variable"
face = "default+d"
modifiers = ["readonly"]

[[semantic_tokens]]
token = "variable"
face = "default+d"
modifiers = ["constant"]

[[semantic_tokens]]
token = "type"
face = "type"

[[semantic_tokens]]
token = "variable"
face = "variable"

[[semantic_tokens]]
token = "namespace"
face = "module"

[[semantic_tokens]]
token = "function"
face = "function"

[[semantic_tokens]]
token = "string"
face = "string"

[[semantic_tokens]]
token = "keyword"
face = "keyword"

[[semantic_tokens]]
token = "operator"
face = "operator"

[[semantic_tokens]]
token = "comment"
face = "comment"


[[semantic_tokens]]
token = "variable"
face = "variable"

[[semantic_tokens]]
token = "parameter"
face = "variable"

[[semantic_tokens]]
token = "function"
face = "function"

[[semantic_tokens]]
token = "method"
face = "memberFunction"

[[semantic_tokens]]
token = "member"
face = "memberVariable"

[[semantic_tokens]]
token = "property"
face = "memberVariable"

[[semantic_tokens]]
token = "class"
face = "type"

[[semantic_tokens]]
token = "enum"
face = "type"

[[semantic_tokens]]
token = "enumMember"
face = "variable" # nonstandard

[[semantic_tokens]]
token = "dependent"
face = "cppDependent" # nonstandard

[[semantic_tokens]]
token = "namespace"
face = "module"

[[semantic_tokens]]
token = "typeParameter"
face = "type"

[[semantic_tokens]]
token = "concept"
face = "cppConcept" # nonstandard

[[semantic_tokens]]
token = "macro"
face = "cppMacro"

[[semantic_tokens]]
token = "comment"
face = "disabledRegion"

