snippet_support = true
verbosity = 2

[server]
# exit session if no requests were received during given period in seconds
# works only in unix sockets mode (-s/--session)
# set to 0 to disable
timeout = 1800 # seconds = 30 minutes

# [language.rust]
# filetypes = ["rust"]
# roots = ["Cargo.toml"]
# command = "rls"

[language.rust]
filetypes = ["rust"]
roots = ["Cargo.toml"]
command = "sh"
# args = ["-c", "rust-analyzer"]
args = ["-c", "rust-analyzer -v -v -v -v -v -v -v -v --log-file /tmp/rust-analyzer.log"]
settings_section = "rustanalyzer"

[language.rust.settings.rustanalyzer]
# If you get 'unresolved proc macro' warnings, you have two options
# 1. The safe choice is two disable the warning:
# diagnostics.disabled = ["unresolved-proc-macro"]
# 2. Or you can opt-in for proc macro support
procMacro.enable = true
procMacro.attributes.enable = true
cargo.loadOutDirsFromCheck = true
cargo.runBuildScripts = true
cargo.features = "all"
# default settings gives "can't find crate test" for no_std targets
checkOnSave.allTargets = true
checkOnSave.extraArgs = [ "--bins" ]
checkOnSave.command = "clippy"
# See https://github.com/rust-analyzer/rust-analyzer/issues/6448
inlayHints.expressionAdjustmentHints.enable = false
inlayHints.closureReturnTypeHints.enable = true
inlayHints.lifetimeElisionHints.enable = "skip_trivial"
imports.granularity.group = "item"
workspace.symbol.search.scope = "workspace"
workspace.symbol.search.kind = "all_symbols" # Otherwise: "only_types"

# These can fail on try blocks and similar syntax that is not implemented in RA
# diagnostics.disabled = ["type-mismatch"]

[language.crystal]
filetypes = ["crystal"]
roots = ["shard.yml"]
command = "scry"

[language.typescript]
filetypes = ["typescript", "javascript"]
roots = ["tsconfig.json", "package.json"]
command = "typescript-language-server"
args = ["--stdio"]

[language.json]
filetypes = ["json"]
roots = ["package.json"]
command = "json-languageserver"
args = ["--stdio"]

[language.css]
filetypes = ["css", "scss", "sass", "less"]
roots = ["package.json"]
command = "css-languageserver"
args = ["--stdio"]

[language.html]
filetypes = ["html"]
roots = ["package.json"]
command = "html-languageserver"
args = ["--stdio"]

[language.ocaml]
filetypes = ["ocaml"]
roots = ["Makefile", "opam", "*.opam"]
command = "ocamllsp"

[language.reason]
filetypes = ["reason"]
roots = ["package.json", "Makefile", ".git", ".hg"]
command = "ocamllsp"

[language.python]
filetypes = ["python"]
roots = ["requirements.txt", "setup.py", ".git", ".hg", "pyproject.toml"]
command = "jedi-language-server"
offset_encoding = "utf-8"

[language.c_cpp]
filetypes = ["c", "cpp"]
roots = ["compile_commands.json"]
command = "sh"
args = ['-c', 'TMPDIR=~/.cache/clangd/ clangd --cross-file-rename --clang-tidy --query-driver=/home/topisani/**,/usr/**,arm-none-eabi-gcc,arm-none-eabi-*,arm-none-eabi-g++,**']

[language.java]
filetypes = ["java"]
roots = ["pom.xml", "build.gradle"]
command = "eclipse.jdt.ls"

# # [language.java.initialization_options.settings.java.trace]
# server = "verbose"

[language.haskell]
filetypes = ["haskell"]
roots = ["Setup.hs", "stack.yaml", "*.cabal"]
command = "haskell-language-server-wrapper"
args = ["--lsp"]
#command = "hie-wrapper"
#args = ["--lsp"]

[language.go]
filetypes = ["go"]
roots = ["Gopkg.toml", "go.mod", ".git", ".hg"]
command = "gopls"
offset_encoding = "utf-8"

[language.bash]
filetypes = ["sh"]
roots = [".git", ".hg"]
command = "bash-language-server"
args = ["start"]

[language.dart]
filetypes = ["dart"]
roots = ["pubspec.yaml", ".git"]
command = "dart"
args = ["/opt/dart-sdk/bin/snapshots/analysis_server.dart.snapshot", "--lsp"]

[language.d]
filetypes = ["d", "di"]
roots = [".git", "dub.sdl", "dub.json"]
command = "dls"

[language.php]
filetypes = ["php"]
roots = [".htaccess", "composer.json"]
command = "intelephense"
args = ["--stdio"]

# [language.php.initialization_options]
# storagePath = "/tmp/intelephense"

[language.nim]
filetypes = ["nim"]
roots = ["*.nimble", ".git"]
command = "nimlsp"

[language.elm]
filetypes = ["elm"]
roots = ["elm.json"]
command = "elm-language-server"
args = ["--stdio"]

# [language.elm.initialization_options]
# runtime = "node"
# elmPath = "elm"
# elmFormatPath = "elm-format"
# elmTestPath = "elm-test"

[language.latex]
filetypes = ["latex"]
roots = ["main.tex"]
command = "texlab"

[language.vue]
filetypes = ["vue"]
roots = ["package.json"]
command = "vls"
settings_section = "vls"

[language.text]
filetypes = ["markdown"]
command = "unified-language-server"
roots = []
args = ["--parser=remark-parse", "--stdio"]

# Semantic tokens support
# See https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_semanticTokens
# for the default list of tokens and modifiers.
# However, many language servers implement their own values.
# Make sure to check the output of `lsp-capabilities` and each server's documentation and source code as well.
# Examples:
# - TypeScript: https://github.com/microsoft/vscode-languageserver-node/blob/2645fb54ea1e764aff71dee0ecc8aceff3aabf56/client/src/common/semanticTokens.ts#L58
# - Rust Analyzer: https://github.com/rust-analyzer/rust-analyzer/blob/f6da603c7fe56c19a275dc7bab1f30fe1ad39707/crates/ide/src/syntax_highlighting.rs#L42



# Tokens:
# comment, 
# keyword, 
# string, 
# number, 
# regexp, 
# operator, 
# namespace, 
# type, 
# struct, 
# class, 
# interface, 
# enum, 
# enumMember, 
# typeParameter, 
# function, 
# method, 
# property, 
# macro, 
# variable, 
# parameter, 
# angle, 
# arithmetic, 
# attribute, 
# bitwise, 
# boolean, 
# brace, 
# bracket, 
# builtinAttribute, 
# builtinType, 
# character, 
# colon, 
# comma, 
# comparison, 
# constParameter, 
# dot, 
# escapeSequence, 
# formatSpecifier, 
# generic, 
# label, 
# lifetime, 
# logical, 
# operator, 
# parenthesis, 
# punctuation, 
# selfKeyword, 
# semicolon, 
# typeAlias, 
# union, 
# unresolvedReference


# Modifiers:
# documentation
# declaration
# definition
# static
# abstract
# deprecated
# readonly
# defaultLibrary
# async
# attribute
# callable
# constant
# consuming
# controlFlow
# crateRoot
# injected
# intraDocLink
# library
# mutable
# public
# reference
# trait
# unsafe


[semantic_tokens]
faces = [
  {token="comment", modifiers=["documentation"], face="documentation"},
  # {token="variable", modifiers=["readonly"], face="+d@variable"},
  # {token="variable", modifiers=["constant"], face="+d@variable"},
  {token="variable", modifiers=["mutable"], face="+i@variable"},
  {token="", modifiers=["deprecated"], face="+u"},
  {token="", modifiers=["intraDocLink"], face="+u"},
  {token="method", modifiers=["trait"], face="memberFunction"},
  {token="type", face="type"},
  {token="struct", face="type"},
  {token="class", face="type"},
  {token="interface", face="type"},
  {token="typeAlias", face="type"},
  {token="union", face="type"},
  {token="variable", face="variable"},
  {token="namespace", face="module"},
  {token="function", face="function"},
  {token="string", face="string"},
  {token="keyword", face="keyword"},
  {token="operator", face="operator"},
  {token="comment", face="comment"},
  {token="variable", face="variable"},
  {token="parameter", face="variable"},
  {token="function", face="function"},
  {token="member", face="variable"}, # Member
  {token="property", face="variable"}, # member
  {token="method", face="function"}, # member
  {token="enum", face="type"},
  {token="enumMember", face="variable" }, # nonstandard
  {token="dependent", face="cppDependent" }, # nonstandard
  {token="namespace", face="module"},
  {token="typeParameter", face="type"},
  {token="concept", face="cppConcept" }, # nonstandard
  {token="macro", face="cppMacro"},
  {token="comment", face="comment"},
  {token="formatSpecifier", face="value"},
]
