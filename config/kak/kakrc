# kakoune.cr
evaluate-commands %sh{
  krc kak-defs
  cork init
}

def load-conf -params 1 %{
  echo -debug "[load-conf] Loading %arg{1}..."
  source "%val{config}/config/%arg{1}.kak"
}

# User interface ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

set-option -add global ui_options terminal_status_on_top=false
set-option -add global ui_options terminal_assistant=none
set-option -add global ui_options terminal_set_title=no
set-option -add global ui_options terminal_synchronized=false

set-option global modelinefmt '{{mode_info}} {magenta}%val{client}{default} at {yellow}%val{session}{default} on {green}%val{bufname}{default} {{context_info}} {cyan}U+%sh{printf ''%04x'' "$kak_cursor_char_value"}{default} {cyan}%val{cursor_line}{default}:{cyan}%val{cursor_char_column}{default}'

# Window-based settings
hook global WinCreate .* %{
  addhl window/matching show-matching
  addhl window/show-whitespaces show-whitespaces
  addhl window/numbers number-lines -hlcursor -separator ' '
}

# Leader / Filetype modes ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

# [space] [backspace] [ret]
map -docstring 'leader' global normal <space> ': enter-user-mode user<ret>'  

# for the kakoune breaking-cleanups branch
# map -docstring 'remove all sels except main' global normal <backspace> , 
# map -docstring 'remove main sel' global normal <a-backspace> <a-,> 

map -docstring 'remove all sels except main' global normal <backspace> <space> 
map -docstring 'remove main sel' global normal <a-backspace> <a-space> 

# Filetype mode from [,] or [c-f]
declare-user-mode filetype
unmap global normal ,
map global normal , ': enter-user-mode filetype<ret>'
map global normal <c-f> ': enter-user-mode filetype<ret>'
map global insert <c-f> ': enter-user-mode filetype<ret>'

load-conf windowing

# Plugins ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

define-command -override mkdir -docstring 'make directory for the current buffer' %{
  nop %sh(mkdir -p -- "$(dirname -- "$kak_buffile")")
}

# Ensure the buffer directory exists when saving.
define-command -override make-directory-on-save -docstring 'make directory on save' %{
  remove-hooks global make-directory-on-save
  hook -group make-directory-on-save global BufWritePre '.*' mkdir
}

remove-hooks global delete-indent-space
hook global -group delete-indent-space InsertDelete ' ' %{
  exec -draft 'i '
  try %{
    eval -draft "exec ';hGh<a-k>^([ ]{%opt[indentwidth]})+\z<ret><lt>'"
  } catch %{
      exec -draft 'i<backspace>'
  }
}

# Auto-pairing of characters
cork auto-pairs https://github.com/alexherbo2/auto-pairs.kak %{
  enable-auto-pairs
}

cork grep-write https://github.com/JacobTravers/kakoune-grep-write

cork kakoune-gdb https://github.com/occivink/kakoune-gdb

cork fzf https://github.com/andreyorst/fzf.kak %{
  require-module fzf
  require-module fzf-file
  set-option global fzf_file_command "fd . --type f -uu --follow"
  set-option global fzf_file_preview false
  require-module fzf-vcs
  #set-option global fzf_git_command "fd . --type f --follow"
  require-module fzf-buffer
}

cork focus https://github.com/caksoylar/kakoune-focus %{
  set global focus_context_lines 1
  set global focus_separator "{FocusMarker}╞══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╡"
  map global user o ': focus-toggle<ret>' -docstring "Toggle selection focus"
}

cork occivink-snippets https://github.com/occivink/kakoune-snippets

cork kakoune-table https://gitlab.com/listentolist/kakoune-table

cork kakoune-text-objects https://github.com/delapouite/kakoune-text-objects

cork kakoune-interactively https://github.com/chambln/kakoune-interactively %{
    alias global cd i-change-directory
    alias global db i-delete-buffer
    alias global q i-quit
    alias global w i-write
    set-option global yes_or_no_instant false
}

cork kakoune-git-mode 'https://github.com/jordan-yee/kakoune-git-mode' %{
    # Set structured commit message options here
    # set-option global git_mode_use_structured_quick_commit true
    # set-option git_mode_commit_prefixes 'feat::fix::docs::refactor::build::test::style::BREAKING CHANGE::'
    # set-option git_mode_branch_label_regex 'SCRUM-[0-9]+'

    # Declare git mode with default set of mappings
    declare-git-mode

    # Suggested user mode mapping
    map global user g ': enter-user-mode git<ret>' -docstring "git mode"

    # I find this quite nice to open the lazygit client.
    map global git o ': tmux-terminal-window lazygit<ret>' -docstring "open lazygit in new window"
    
    hook global WinCreate .* %{ evaluate-commands %sh{
        if [ $kak_buffile != $kak_bufname ] && git ls-files --error-unmatch "$kak_buffile" > /dev/null 2>&1; then
            echo "git-mode-show-diff"
        fi
    }}
    hook global BufWritePost .* git-mode-update-diff
    hook global BufReload .* git-mode-update-diff
}

cork kakoune-sudo-write 'https://github.com/occivink/kakoune-sudo-write'

# Insert mode ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

map -docstring 'indent' global insert <tab> '<a-;><a-gt>'
map -docstring 'deindent' global insert <s-tab> '<a-;><lt>' 

# Normal mode ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

map -docstring 'Select all occurrences of current selection' global normal <a-L> '"aZ*%s<ret>"bZ"az"b<a-z>a'

map -docstring 'Comment' global normal '#' ': comment-line<ret>'
map -docstring 'Comment' global normal '<a-#>' ': comment-block<ret>'

define-command -override select-highlights -docstring 'select all occurrences of current selection' %{
  execute-keys '"aZ*%s<ret>"bZ"az"b<a-z>a'
}

map -docstring 'lsp...' global normal "'" ': enter-user-mode lsp<ret>'

# for the kakoune breaking-cleanups branch
map -docstring 'Select next whole line' global normal <X> ': select-next-whole-line<ret>'
define-command -override select-next-whole-line -docstring 'Performs the old <X> command from kakoune' %{
  try %[
    execute-keys '<a-k>^.*$<ret>'
    execute-keys 'Jx'
  ] catch %[
    execute-keys 'x'
  ]
}

# Move comma (remove selections) to backspace
map global normal <backspace> ,
map global normal <a-backspace> <a-,>

def -override bc %{
  exec "|sed -e '$a\'|bc<ret>"
}

# Map 0 to :
map global normal 0 %{:zero 'exec :'<ret>}
def zero -hidden -params 1 %{ eval %sh{[ "$kak_count" -eq 0 ] && echo "$1" || echo "exec '${kak_count}0'"} }

# User mode ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

map -docstring 'Open terminal' global user <ret> ': connect terminal<ret>'
map -docstring 'Surround mode' global user s ': surround-mode<ret>'
map -docstring 'Replace' global user r ': enter-replace-mode<ret>'
map -docstring 'Popup Terminal' global user <c-p> ': connect popup<ret>'

def sidetree -override %{ connect panel sidetree --select %val{buffile} }
map -docstring 'sidetree' global user <tab> ': sidetree<ret>'

# Prompt mode ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

map -docstring 'Search' global prompt <c-f> '<home>(?i)<end>'
map -docstring 'Paste' global prompt <c-v> '<c-r>"'
map -docstring 'Insert the directory name of the current buffer' global prompt <c-d> '%sh{dirname "$kak_bufname"}<a-!>/'

# Disable space autoselecting the next completion
# Disable backspace exiting the prompt
# https://github.com/mawww/kakoune/issues/4311
map global prompt <space> '<a-;>: eval -save-regs a %{ set-register a " "; exec <lt>c-r<gt>a }<ret>'
map global prompt <backspace> '<left><del>'

# Personal scripts ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

set-option global makecmd 'make -j 8'
# Use ripgrep
set-option global grepcmd 'rg -Hn --no-heading'

load-conf lsp
load-conf c++
load-conf rust

load-conf ide
ide-setup

# Filetype hooks ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

hook global BufCreate .*\.bb(|class|append) %{
  set buffer filetype sh
}
hook global BufCreate .*\.conf %{
  set buffer filetype ini
}

hook global BufCreate .*Makefile\..* %{
  set buffer filetype makefile
}

hook global BufCreate .*\.yuck %{
  set buffer filetype lisp
}

# openocd files
hook global BufCreate .*\.ocd %{
  set buffer filetype sh
}

# Global highlighter ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

def -override hl-todo-enable %{
  hl-todo-disable
  addhl window/hl-todo regex "\b(?:(TODO)|(FIXME)|(NOTE))\b" 1:MarkerTodo 2:MarkerFixme 3:MarkerNote
}

def -override hl-todo-disable %{
  rmhl window/hl-todo
}

# Do it here so it hopefully runs after all other language-specific highlighters
filetype-hook .* %{
  hl-todo-enable
}

# ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
colorscheme %sh{ colorscheme-switch --current }
