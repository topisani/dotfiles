# kakoune.cr
evaluate-commands %sh{
  krc kak-defs
  # We're assuming the default bundle_path here...
  plugins="$kak_config/bundle"
  mkdir -p "$plugins"
  [ ! -e "$plugins/kak-bundle" ] && \
    git clone -q https://github.com/jdugan6240/kak-bundle "$plugins/kak-bundle"
  printf "%s\n" "source '$plugins/kak-bundle/rc/kak-bundle.kak'"
}
bundle-noload kak-bundle https://github.com/jdugan6240/kak-bundle

def load-conf -params 1 %{
  echo -debug "[load-conf] Loading %arg{1}..."
  source "%val{config}/config/%arg{1}.kak"
}
def filetype-hook -params 2 %{ 
  hook global WinSetOption "filetype=%arg{1}" %arg{2}
}
def filetype-assign -params 2 %{
  hook global BufCreate %arg{1} "set buffer filetype %arg{2}"
}

# User interface ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

set-option -add global ui_options terminal_status_on_top=false
set-option -add global ui_options terminal_assistant=none
set-option -add global ui_options terminal_set_title=no
set-option -add global ui_options terminal_synchronized=false

declare-option str modeline_client_flags ""
def update-client-flags -hidden -override %{
  eval %sh{
    set -- $kak_client_list
    for client do
      val=""
      [ "$client" = "$kak_opt_jumpclient" ] && val="${val}j"
      [ "$client" = "$kak_opt_docsclient" ] && val="${val}d"
      [ "$client" = "$kak_opt_toolsclient" ] && val="${val}t"
      [ -n "$val" ] && val=" $val"
      echo "eval -client $client %{ set window modeline_client_flags '$val' }"
    done
  }
}
rmhooks global modeline-client-flags
hook -group modeline-client-flags global WinDisplay .* update-client-flags
hook -group modeline-client-flags global FocusIn .* update-client-flags
hook -group modeline-client-flags global FocusOut .* update-client-flags
hook -group modeline-client-flags global GlobalSetOption '(jump|docs|tools)client=.*' update-client-flags

set-option global modelinefmt '{white+d}%opt{modeline_lsp_progress} {{mode_info}} {magenta}%val{client}{magenta+d}%opt{modeline_client_flags}{default} at {yellow}%val{session}{default} on {green}%val{bufname}{default} {{context_info}} {cyan}U+%sh{printf ''%04x'' "$kak_cursor_char_value"}{default} {cyan}%val{cursor_line}{default}:{cyan}%val{cursor_char_column}{default}+{cyan}%val{selection_length}{default}'

def toggle-numbers -override %{
  try %{
    addhl window/numbers number-lines -hlcursor -separator ' '
  } catch %{
    rmhl window/numbers
  }

  git hide-diff
  try %{
    git show-diff
    rmhooks window my-git-diff
    hook -group my-git-diff window BufWritePost .* git update-diff
    hook -group my-git-diff window BufReload .* git update-diff
  }
}

# Window-based settings
hook global WinCreate .* %{
  addhl window/matching show-matching
  addhl window/show-whitespaces show-whitespaces
  toggle-numbers
}

load-conf windowing

# Plugins ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

define-command -override mkdir -docstring 'make directory for the current buffer' %{
  nop %sh(mkdir -p -- "$(dirname -- "$kak_buffile")")
}

# Ensure the buffer directory exists when saving.
define-command -override make-directory-on-save -docstring 'make directory on save' %{
  remove-hooks global make-directory-on-save
  hook -group make-directory-on-save global BufWritePre '.*' mkdir
}

# Auto-pairing of characters
bundle auto-pairs.kak https://github.com/xzto/auto-pairs.kak %{
  enable-auto-pairs
}

bundle kakoune-grep-write https://github.com/JacobTravers/kakoune-grep-write

bundle kakoune-gdb https://github.com/occivink/kakoune-gdb

# bundle fzf.kak https://github.com/andreyorst/fzf.kak %{
#   require-module fzf
#   require-module fzf-file
#   set-option global fzf_file_command "fd . --type f -uu --follow"
#   set-option global fzf_file_preview false
#   require-module fzf-vcs
#   #set-option global fzf_git_command "fd . --type f --follow"
#   require-module fzf-buffer
# }

bundle kakoune-focus https://github.com/caksoylar/kakoune-focus %{
  set global focus_context_lines 1
  set global focus_separator "{FocusMarker}╞══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╡"
  map global user o ': focus-toggle<ret>' -docstring "Toggle selection focus"
}

bundle kakoune-snippets https://github.com/occivink/kakoune-snippets

bundle kakoune-table https://gitlab.com/listentolist/kakoune-table

# bundle kakoune-text-objects https://github.com/delapouite/kakoune-text-objects

bundle kakoune-interactively https://github.com/chambln/kakoune-interactively %{
    alias global cd i-change-directory
    alias global db i-delete-buffer
    alias global q i-quit
    alias global w i-write
    set-option global yes_or_no_instant false
}

bundle kakoune-sudo-write https://github.com/occivink/kakoune-sudo-write

bundle kakoune-cargo https://gitlab.com/Screwtapello/kakoune-cargo

bundle kak-ansi https://github.com/eraserhd/kak-ansi

bundle-customload kakoune-boost https://github.com/krobelus/kakoune-boost %{
  source "%opt{bundle_path}/kakoune-boost/surround.kak"
  source "%opt{bundle_path}/kakoune-boost/git.kak"
  source "%opt{bundle_path}/kakoune-boost/doc.kak"
  load-conf git
  load-conf ide
}

# Insert mode ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

load-conf indent
enable-auto-indent
enable-detect-indent
set-indent global 4

# Normal mode ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

# Leader / Filetype modes ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

# Filetype mode from [,] or [c-f]
declare-user-mode filetype
unmap global normal ,
map global normal , ': enter-user-mode filetype<ret>'
map global normal <c-f> ': enter-user-mode filetype<ret>'
map global insert <c-f> ': enter-user-mode filetype<ret>'

map global normal '#' ': comment-line<ret>' -docstring "Comment line"
map global normal '<a-#>' ': comment-block<ret>' -docstring "Comment block"

map global normal "'" ': enter-user-mode lsp<ret>' -docstring 'lsp...' 

# Restores old kakoune behavior that i liked
map global normal <X> ': select-next-whole-line<ret>' -docstring 'Select next whole line' 
define-command -hidden -override select-next-whole-line -docstring 'Performs the old <X> command from kakoune' %{
  try %[
    execute-keys '<a-k>^.*$<ret>'
    execute-keys 'Jx'
  ] catch %[
    execute-keys 'x'
  ]
}

# Move comma (remove selections) to backspace
map global normal <backspace> ,
map global normal <a-backspace> <a-,>

def -override bc %{
  exec "|sed -e '$a\'|bc<ret>"
}

map global view u '<esc>:execute-keys %sh{echo $(($kak_window_height / 2))} vkv<ret>' -docstring 'scroll half page up'
map global view d '<esc>:execute-keys %sh{echo $(($kak_window_height / 2))} vjv<ret>' -docstring 'scroll half page down'
map global view <c-b> '<esc>:execute-keys %val{window_height} vkv<ret>' -docstring 'scroll one page up'
map global view <c-f> '<esc>:execute-keys %val{window_height} vjv<ret>' -docstring 'scroll one page down'

# Merge all current selections into one
define-command -hidden -override my-hull %{
    evaluate-commands -save-regs ^ %{
        evaluate-commands -save-regs ab %{
            execute-keys %exp{%reg{hash}()}
            execute-keys '"aZ'
            execute-keys ,"bZ"az(,"b<a-z>u
            execute-keys -save-regs '' Z
        }
        execute-keys z
    }
}

map global normal <a-%> ':my-hull<ret>'

# Prompt mode ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

map global prompt <c-f> '<home>(?i)<end>' -docstring 'Search'
map global prompt <c-v> '<c-r>"' -docstring 'Paste'
map global prompt <c-d> '%sh{dirname "$kak_bufname"}<a-!>/' -docstring 'Insert the directory name of the current buffer'

# Disable space autoselecting the next completion
# Disable backspace exiting the prompt
# https://github.com/mawww/kakoune/issues/4311
map global prompt <space> '<a-;>: eval -save-regs a %{ set-register a " "; exec <lt>c-r<gt>a }<ret>'
map global prompt <backspace> '<left><del>'

# Personal scripts ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

set-option global makecmd 'make -j 8'
# Use ripgrep
set-option global grepcmd 'rg -Hn --no-heading --vimgrep'

# load-conf git
load-conf tree-sitter
load-conf lsp
load-conf c++
load-conf rust


def -override debughl %{
    echo -to-file "/tmp/kak-debughl.txt" "%opt[kts_highlighter_ranges] %opt[lsp_semantic_tokens]"
    info %sh{
        line=$kak_cursor_line
        col=$kak_cursor_column
        awk -vRS='[ \n]' -F'[,|.]' -vl=$line -vc=$col '(l >= $1 && c >= $2) && (l <= $3 && c <= $4) { print $0 }' "/tmp/kak-debughl.txt"
        rm -f "/tmp/kak-debughl.txt" > /dev/null
    }
}

def -override debughl-enable %{
    rmhooks global debughl
    hook global -group debughl NormalIdle .* debughl
}

def -override debughl-disable %{
    rmhooks global debughl
}

# Set the session name to the Git repo or the CWD unless we already
# have a session name that doesn't look like a PID (via "kak -s").
evaluate-commands %sh{
  expr -- "$kak_session" : '^[0-9]*$' >/dev/null || exit
  root="$(git rev-parse --show-toplevel 2>/dev/null)"
  root=${root##*/}
  root="${root:-$PWD}"
  session_name="$(printf %s "$root" | sed s/[^a-zA-Z0-9_-]/_/g)"
  echo "try %{ rename-session $session_name }"
}


# Filetype hooks ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

filetype-assign .*\.bb(|class|append) sh
filetype-assign .*Makefile\..* makefile
filetype-assign .*\.yuck lisp
filetype-assign .*\.ocd sh
filetype-assign .*\.conf conf
filetype-assign .*\.surql sql
filetype-assign .*\.dts devicetree
filetype-assign "xkb/symbols/[\w/]$" xkb_symbols
filetype-assign .*\.kdl kdl
filetype-assign .*\.hjson hjson

filetype-hook hjson %{
  require-module yaml
  addhl window/ ref yaml
  addhl window/comment regex '//[^\n]*' 0:comment
  set window comment_line '#'
}

filetype-hook xkb_symbols %{
  addhl window/comment regex '//[^\n]*' 0:comment
  set window comment_line '//'
}

filetype-hook kdl %{
  set window comment_line '//'
}

filetype-hook lsp-goto %{
  set buffer buffer_kind jump
}

# Global highlighter ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

def -override hl-todo-enable %{
  hl-todo-disable
  addhl window/hl-todo regex "\b(?:(TODO)|(FIXME)|(NOTE))\b" 1:MarkerTodo 2:MarkerFixme 3:MarkerNote
}

def -override hl-todo-disable %{
  rmhl window/hl-todo
}

# Do it here so it hopefully runs after all other language-specific highlighters
filetype-hook .* %{
  hl-todo-enable
}

# kakscript filetype improvements┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

filetype-hook kak %{
  try %{
    addhl shared/kakrc/code/map regex '^\h*map\h+(global|window|buffer)\h+([\w-]+)' 2:variable
    addhl shared/kakrc/code/user-mode regex '^\h*declare-user-mode\h+([\w-]+)' 1:variable
  }

  map buffer filetype v ':evaluate-commands -- %reg{.}<ret>'
}

# ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
colorscheme %sh{ colorscheme-switch --current }


# ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

def -override markdown-live %{
    terminal mdlive %val[buffile]
}

load-conf user-mode
