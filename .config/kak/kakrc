evaluate-commands %sh{echo source $HOME/.config/kak/kak/modules.kak}

import utils
import global
import diff
import macros
import fzf

# Plugs

source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug andreyorst/plug.kak branch kakoune-git noload

plug alexherbo2/prelude.kak
plug alexherbo2/terminal-mode.kak
plug occivink/kakoune-gdb

plug alexherbo2/auto-pairs.kak config %{
  hook global WinCreate .* %{
    auto-pairs-enable
  }
}
plug alexherbo2/connect.kak config %{
  require-module connect-lf
  set-option global connect_environment %{
    GIT_EDITOR='kak -c $KAKOUNE_SESSION'
    export LYEDITOR='edit %(file)s +%(line)s:%(column)s'
  }
}
plug occivink/kakoune-find config %{
  define-command -docstring "grep-apply-changes: apply changes specified in current *grep* buffer to their respective files" \
  grep-apply-changes %{ find-apply-changes -force }
}

plug alexherbo2/mkdir.kak config %{
  hook global BufWritePre .* %{
  	mkdir-buffer %reg[%]
  }
}
plug alexherbo2/search-highlighter.kak

set-option global modelinefmt '{{mode_info}} {magenta}%val{client}{default} at {yellow}%val{session}{default} on {green}%val{bufname}{default} {cyan}%val{cursor_line}{default}:{cyan}%val{cursor_char_column}{default} {{context_info}}'

#################################################
# CONFIGURATION
#################################################

# Move macros to ¨
map global normal ¨ q
map global normal <a-¨> Q

map-all normal %{
    '#' comment-line "Comment line"
    '<a-#>' comment-block "Comment line"
}

def file-delete -docstring \
"Delete current file" %{
   prompt "Delete file [Y/n]? " '%sh{ [[ "$kak_text" =~ [yY] ]] && rm $kak_buffile && echo "delete-buffer" }' 
}

new-mode files f %{
    f "fzf-file"                               "List files"
    t 'lf %reg[percent]'                       "File tree (current file)"
    T "lf ."                                   "File tree (current dir)"
    w "write"                                  "Write file" 
    c "fzf-file ~/.config/kak/"                "Open config dir"
    d "file-delete"                            "Delete current file"
}

new-mode buffers b %{
    b fzf-buffer      "List Buffers" 
    n buffer-next     "Next Buffer" 
    p buffer-previous "Prev buffer" 
    d delete-buffer   "Delete buffer"
    u 'buffer *debug*' "Debug buffer"
}

def tmux-new-vertical -params .. -command-completion %{
  tmux-terminal-vertical kak -c %val{session} -e "%arg{@}"
}

def tmux-new-horizontal -params .. -command-completion %{
  tmux-terminal-horizontal kak -c %val{session} -e "%arg{@}"
}

new-mode my-tmux w %{
    h     'tmux select-pane -L' 'Select pane to the left'  -sh
    j     'tmux select-pane -D' 'Select pane below'        -sh
    k     'tmux select-pane -U' 'Select pane above'        -sh
    l     'tmux select-pane -R' 'Select pane to the right' -sh

    <tab> 'tmux last-pane'      'Select last pane'         -sh
    J     'tmux swap-pane -D'   'Swap pane below'          -sh
    K     'tmux swap-pane -U'   'Swap pane above'          -sh

    s     'tmux-new-vertical'   'Split horizontally'
    v     'tmux-new-horizontal' 'Split vertically'
    d     quit                  'Delete pane'
}

def git-blame-toggle %{
    try %[
        addhl window/git-blame flag_lines Info git_blame_flags
        rmhl window/git-blame
        git blame
    ] catch %[
        git hide-blame
    ]
}

new-mode git g %{
    g     'repl tig'            'Open tig'
    f     'fzf-git'             'Open files in repo'
    p     ':git '               'Open git prompt' -raw
    b     'git-blame-toggle'    'Toggle git blame'
}

# switch windows
map-all user -sh %{
    1 'tmux-select-pane 1'  'Select pane 1'
    2 'tmux-select-pane 2'  'Select pane 2'
    3 'tmux-select-pane 3'  'Select pane 3'
    4 'tmux-select-pane 4'  'Select pane 4'
    5 'tmux-select-pane 5'  'Select pane 5'
    6 'tmux-select-pane 6'  'Select pane 6'
    7 'tmux-select-pane 7'  'Select pane 7'
    8 'tmux-select-pane 8'  'Select pane 8'
    9 'tmux-select-pane 9'  'Select pane 9'
    0 'tmux-select-pane 10' 'Select pane 10'
}

import surround
map global user s -docstring 'Surround' ': surround-mode<ret>'

decl str local_config_dir

def source-local-config -override -params ..1 %{
  eval %sh{
      function upsearch () {
          if test / == "$PWD"; then
              return
          elif test -e "$1"; then
              echo "set buffer local_config_dir $PWD"
              echo "source $PWD/$1"
              return
          else
              cd ..
              upsearch "$1"
          fi
      }

      startdir=${1:-$(dirname $kak_buffile)}
      [[ -d "$startdir" ]] && cd $startdir
      upsearch ".local.kak"
  }
}

hook global BufCreate .* source-local-config 
hook global BufCreate .* modeline-parse

# Autoload manually

declare-option str-list autoload_ignore core/php extra/modeline

# Filetypes

# Load current terminal colorscheme
colorscheme %sh{ colorscheme-switch --current }

hook global BufCreate .*\.bb(|class|append) %{
  set buffer filetype sh
}
hook global BufCreate .*\.conf %{
  set buffer filetype ini
}

import modeline
import markdown
import php
import c++
import js
import meson
import faust

import ide

hook -once global ModeChange .* ide-setup

colorscheme %sh{ colorscheme-switch --current }

